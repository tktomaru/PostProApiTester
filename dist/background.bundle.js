var g={},k;function _(){return k||(k=1,function(){let s=!1,a={methods:["GET","POST","PUT","DELETE"],domain:""},o=new Map;chrome.runtime.onMessage.addListener((e,t,r)=>{switch(e.action){case"startInterceptor":I(e.filters),r({success:!0});break;case"stopInterceptor":y(),r({success:!0});break;case"getInterceptorStatus":r({active:s});break;default:r({error:"Unknown action"})}return!0});function I(e){s||(s=!0,a=e||a,chrome.webRequest.onBeforeRequest.addListener(d,{urls:["<all_urls>"]},["requestBody"]),chrome.webRequest.onSendHeaders.addListener(l,{urls:["<all_urls>"]},["requestHeaders"]),chrome.webRequest.onHeadersReceived.addListener(h,{urls:["<all_urls>"]},["responseHeaders"]),chrome.webRequest.onCompleted.addListener(m,{urls:["<all_urls>"]},["responseHeaders"]),chrome.webRequest.onErrorOccurred.addListener(f,{urls:["<all_urls>"]}),console.log("Network interceptor started"))}function y(){s&&(s=!1,chrome.webRequest.onBeforeRequest.removeListener(d),chrome.webRequest.onSendHeaders.removeListener(l),chrome.webRequest.onHeadersReceived.removeListener(h),chrome.webRequest.onCompleted.removeListener(m),chrome.webRequest.onErrorOccurred.removeListener(f),o.clear(),console.log("Network interceptor stopped"))}function d(e){if(!b(e))return;const t={id:e.requestId,url:e.url,method:e.method,timestamp:Date.now(),headers:{},body:null,status:null,responseHeaders:{},duration:null};if(e.requestBody)if(e.requestBody.raw){const r=new TextDecoder;t.body=e.requestBody.raw.map(n=>r.decode(n.bytes)).join("")}else e.requestBody.formData&&(t.body=e.requestBody.formData);o.set(e.requestId,t)}function l(e){const t=o.get(e.requestId);t&&(e.requestHeaders&&e.requestHeaders.forEach(r=>{t.headers[r.name]=r.value}),o.set(e.requestId,t))}function h(e){const t=o.get(e.requestId);t&&(t.status=e.statusCode,e.responseHeaders&&e.responseHeaders.forEach(r=>{t.responseHeaders[r.name]=r.value}),o.set(e.requestId,t))}function m(e){const t=o.get(e.requestId);if(t&&(t.duration=Date.now()-t.timestamp,t.status=e.statusCode,u({action:"requestIntercepted",request:t}),o.size>100)){const r=o.keys().next().value;o.delete(r)}}function f(e){const t=o.get(e.requestId);t&&(t.duration=Date.now()-t.timestamp,t.status=0,t.error=e.error,u({action:"requestIntercepted",request:t}),o.delete(e.requestId))}function b(e){if(e.url.startsWith("chrome-extension://")||!a.methods.includes(e.method))return!1;if(a.domain)try{if(!new URL(e.url).hostname.includes(a.domain))return!1}catch{return!1}return!0}function u(e){chrome.runtime.sendMessage(e).catch(()=>{})}chrome.runtime.onInstalled.addListener(e=>{console.log("API Tester extension installed:",e.reason),chrome.storage.local.set({settings:{timeout:3e4,followRedirects:!0,validateSSL:!0,maxHistoryItems:100},collections:[],history:[],variables:{global:{},environment:{},collection:{}}})}),chrome.runtime.onStartup.addListener(()=>{console.log("API Tester extension started")}),chrome.action.onClicked.addListener(e=>{console.log("Extension icon clicked on tab:",e.id),chrome.tabs.create({url:chrome.runtime.getURL("index.html")})}),chrome.runtime.onInstalled.addListener(()=>{chrome.storage.local.clear(()=>{console.log("debug用の暫定処理：ストレージをクリアしました（onInstalled）")}),chrome.contextMenus.create({id:"interceptRequest",title:"Test this API with API Tester",contexts:["link"],targetUrlPatterns:["http://*/*","https://*/*"]})}),chrome.runtime.onStartup.addListener(()=>{chrome.alarms.create("cleanup",{delayInMinutes:60,periodInMinutes:60})}),chrome.tabs.onUpdated.addListener((e,t,r)=>{t.status==="complete"&&r.url&&console.log("Tab updated:",r.url)}),chrome.storage.onChanged.addListener((e,t)=>{t==="local"&&u({action:"storageChanged",changes:e})}),chrome.runtime.onConnect.addListener(e=>{e.name==="popup"&&e.onMessage.addListener(t=>{t.action==="getNetworkState"&&e.postMessage({interceptorActive:s,interceptedCount:o.size})})}),chrome.runtime.onMessage.addListener((e,t,r)=>{if(e.action==="exportInterceptedData"){const n=Array.from(o.values());return r({data:n}),!0}});async function L(e){const t=R(e);return new Promise((r,n)=>{chrome.identity.launchWebAuthFlow({url:t,interactive:!0},i=>{if(chrome.runtime.lastError){n(chrome.runtime.lastError);return}try{const c=new URL(i).searchParams,w=c.get("code"),q=c.get("error");q?n(new Error(q)):w?r(w):n(new Error("No authorization code received"))}catch(c){n(c)}})})}function R(e){const t=new URLSearchParams({response_type:"code",client_id:e.clientId,redirect_uri:e.redirectUri,scope:e.scope||"",state:T()});return`${e.authUrl}?${t.toString()}`}function T(){return`state_${Date.now()}_${Math.random().toString(36).substring(2)}`}async function v(e,t){const r={grant_type:"authorization_code",client_id:e.clientId,client_secret:e.clientSecret,code:t,redirect_uri:e.redirectUri},n=await fetch(e.tokenUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams(r)});if(!n.ok)throw new Error(`Token exchange failed: ${n.statusText}`);return await n.json()}async function S(e,t){const r={grant_type:"refresh_token",client_id:e.clientId,client_secret:e.clientSecret,refresh_token:t},n=await fetch(e.tokenUrl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams(r)});if(!n.ok)throw new Error(`Token refresh failed: ${n.statusText}`);return await n.json()}chrome.runtime.onMessage.addListener(async(e,t,r)=>{if(e.action==="oauth2Authorize"){try{const n=await L(e.config),i=await v(e.config,n);r({success:!0,tokens:i})}catch(n){r({success:!1,error:n.message})}return!0}if(e.action==="oauth2Refresh"){try{const n=await S(e.config,e.refreshToken);r({success:!0,tokens:n})}catch(n){r({success:!1,error:n.message})}return!0}});let p={requestCount:0,averageResponseTime:0,errorCount:0};chrome.runtime.onMessage.addListener((e,t,r)=>{if(e.action==="getPerformanceMetrics")return r(p),!0;if(e.action==="resetPerformanceMetrics")return p={requestCount:0,averageResponseTime:0,errorCount:0},r({success:!0}),!0}),console.log("API Tester background script loaded")}()),g}_();
