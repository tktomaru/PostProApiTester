tasks:
  - id: feature-pm-test
    prompt: |
      Postman のテストスクリプトは、Collection Runner や Newman 実行時にレスポンス取得後に走る JavaScript コードで、以下の仕様と API が提供されています。これに対応してください

      ---

      ## 1. 実行タイミングと環境

      * **Pre-request Script**
      リクエスト送信前に実行。認証トークンの取得や動的ヘッダー／クエリパラメータ設定に使います。

      * **Test Script**
      レスポンスを受け取った直後に実行。`pm.response` を使ってレスポンスの検証や次のリクエストへの変数受け渡しを行います。

      いずれも **Sandbox 環境** 下の JavaScript（ES5 相当）で走り、外部ネットワーク呼び出しは禁止、Postman が用意するグローバルオブジェクトとライブラリのみ利用可能です。

      ---

      ## 2. 利用できるグローバルオブジェクト

      | オブジェクト             | 用途                                   |
      | :----------------- | :----------------------------------- |
      | `pm`               | メイン API 名前空間（以下すべてのメソッド・プロパティを持つ）    |
      | `pm.request`       | 送信したリクエスト情報                          |
      | `pm.response`      | 取得したレスポンス情報                          |
      | `pm.environment`   | 環境変数管理                               |
      | `pm.globals`       | グローバル変数管理                            |
      | `pm.iterationData` | Collection Runner 実行時の CSV／JSON データ行 |
      | `pm.cookies`       | レスポンスの Cookie 操作                     |
      | `console`          | Postman コンソールへのログ                    |

      ---

      ## 3. 主要 API

      ### 3.1 テスト定義

      ```js
      pm.test("ステータスコードは200", function () {
          pm.response.to.have.status(200);
      });
      ```

      * `pm.test(name: string, fn: function)`
      テストケースを定義。名前はレポートで使われ、失敗すると赤く表示されます。

      ### 3.2 アサーション（Chai Assertion Library）

      Postman は［Chai BDD］スタイルのアサーションをサポートしています：

      ```js
      pm.response.to.have.status(200);
      pm.response.to.have.header("Content-Type", /json/);
      pm.expect(pm.response.json().data.length).to.be.above(0);
      pm.expect(pm.response.text()).to.include("success");
      ```

      * `pm.response.to.have` … ステータス・ヘッダー・タイムアウト・サイズなど
      * `pm.expect(value).to.equal(x)` … 値の比較
      * `.above()`, `.below()`, `.include()`, `.match()` など多数

      ### 3.3 変数操作

      ```js
      // 環境変数にセット
      pm.environment.set("userId", pm.response.json().id);

      // グローバル変数にセット
      pm.globals.set("authToken", pm.response.json().token);

      // 変数の取得
      const token = pm.environment.get("authToken");
      ```

      * `pm.environment.get/set/clear()`
      * `pm.globals.get/set/clear()`
      * `pm.variables.get(key)` … Pre-request や Test 共通の「ローカル変数」

      ### 3.4 リクエスト情報

      ```js
      console.log(pm.request.method);
      console.log(pm.request.url.toString());
      ```

      * メソッド・URL・ヘッダー・ボディなどを参照できます。

      ### 3.5 レスポンス情報

      ```js
      // ステータス
      pm.response.code;      // 数値
      pm.response.status;    // テキスト

      // JSON パース
      const data = pm.response.json();

      // 生のテキスト
      const text = pm.response.text();
      ```

      ### 3.6 ループ／分岐処理や外部ライブラリ

      * `for`, `while`, `if` など通常の JS が使えます。
      * 標準で組み込み済みライブラリ：

      * Lodash (`_`)
      * CryptoJS (`CryptoJS`)
      * xml2Json, tv4（JSON Schema 検証）

      ---

      ## 4. サンプル：レスポンスヘッダーと JSONPath

      ```js
      pm.test("認証ヘッダーを含む", () => {
          pm.response.to.have.header("authorization");
      });

      // JSON のネストしたプロパティを検証
      pm.test("ユーザー名が正しい", () => {
          const json = pm.response.json();
          pm.expect(json.user.name).to.eql("Tarou");
      });

      // JSONPath を使って動的テスト
      const result = pm.response.jsonPath("$.items[?(@.id==123)].status");
      pm.test("ID=123 のステータスを検証", () => {
          pm.expect(result).to.eql(["active"]);
      });
      ```

      ---

      ## 5. Newman・CI 連携

      * `newman run collection.json -e env.json` で CLI 実行可能。
      * Jenkins/GitHub Actions などに組み込んで CI 化できます。

      ---

      ### まとめ

      1. **Pre-request Script** で準備、**Test Script** でレスポンス検証
      2. JavaScript（ES5）＋ Chai Assertion ＋ Postman API
      3. `pm.*` を中心に、変数操作やログ出力、アサーションを行う
      4. Newman 経由で自動化 → CI/CD 連携

      Postman ドキュメント（公式）にも詳しいリファレンスがあるので、必要に応じてそちらもご参照ください。
  - id: feature-pm-test
    prompt: |
      12.testが正常に実行されるようにしてほしい
  - id: feature-unit-test
    prompt: |
      単体テストコードを実装して、13-unit-test.shで実行されるようにしてほしい。13-unit-test.shにはエラーがないようにしてほしい。
  - id: feature-refact
    prompt: |
      リファクタリングして、人にとって見やすいようにしてほしい。





